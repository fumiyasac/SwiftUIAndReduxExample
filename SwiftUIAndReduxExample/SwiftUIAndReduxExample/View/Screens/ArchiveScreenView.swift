//
//  ArchiveScreenView.swift
//  SwiftUIAndReduxExample
//
//  Created by ÈÖí‰∫ïÊñá‰πü on 2021/10/16.
//

import SwiftUI

struct ArchiveScreenView: View {

    // MARK: - Redux

    @EnvironmentObject var store: Store<AppState>

    private struct Props {
        // Immutable„Å´Êâ±„ÅÜProperty üëâ ÁîªÈù¢Áä∂ÊÖãÁÆ°ÁêÜÁî®
        let isLoading: Bool
        let isError: Bool
        let inputText: String
        let selectedCategory: String
        // Immutable„Å´Êâ±„ÅÜProperty üëâ ÁîªÈù¢Ë°®Á§∫Ë¶ÅÁ¥†Áî®
        let archiveCellViewObjects: [ArchiveCellViewObject]
        // ActionÁô∫Ë°åÁî®„ÅÆClosure
        let requestArchiveWithSelecedCategory: (String) -> Void
        let requestArchiveWithInputText: (String) -> Void
        let requestArchiveWithNoConditions: () -> Void
        let addToDatabase: (ArchiveCellViewObject) -> Void
        let removeFromDatabase: (ArchiveCellViewObject) -> Void
        let requestArchive: () -> Void
        let retryArchive: () -> Void
    }

    private func mapStateToProps(state: ArchiveState) -> Props {
        Props(
            isLoading: state.isLoading,
            isError: state.isError,
            inputText: state.inputText,
            selectedCategory: state.selectedCategory,
            archiveCellViewObjects: state.archiveCellViewObjects,
            requestArchiveWithSelecedCategory: { selectedCategory in
                store.dispatch(action: RequestArchiveWithSelectedCategoryAction(selectedCategory: selectedCategory))
            },
            requestArchiveWithInputText: { inputText in
                store.dispatch(action: RequestArchiveWithInputTextAction(inputText: inputText))
            },
            requestArchiveWithNoConditions: {
                store.dispatch(action: RequestArchiveWithNoConditionsAction())
            },
            addToDatabase: { archiveCellViewObject in
                store.dispatch(action: AddArchiveObjectAction(archiveCellViewObject: archiveCellViewObject))
            },
            removeFromDatabase: { archiveCellViewObject in
                store.dispatch(action: DeleteArchiveObjectAction(archiveCellViewObject: archiveCellViewObject))
            },
            requestArchive: {
                store.dispatch(action: RequestArchiveWithNoConditionsAction())
            },
            retryArchive: {
                store.dispatch(action: RequestArchiveWithNoConditionsAction())
            }
        )
    }

    // MARK: - Body

    var body: some View {
        // Ë©≤ÂΩìÁîªÈù¢„ÅßÂà©Áî®„Åô„ÇãState(„Åì„Åì„Åß„ÅØArchiveState)„Çí„Åì„ÅÆÁîªÈù¢Áî®„ÅÆProps„Å´„Éû„ÉÉ„Éî„É≥„Ç∞„Åô„Çã
        let props = mapStateToProps(state: store.state.archiveState)

        // Ë°®Á§∫„Å´ÂøÖË¶Å„Å™ÂÄ§„ÇíProps„Åã„ÇâÂèñÂæó„Åô„Çã
        let isLoading = mapToIsLoading(props: props)
        let isError = mapToIsError(props: props)

        // ÁîªÈù¢Áî®„ÅÆProps„Å´Âøú„Åò„ÅüÁîªÈù¢Ë¶ÅÁ¥†Ë°®Á§∫Âá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã
        NavigationStack {
            VStack(spacing: 0.0) {
                // (1) Ê§úÁ¥¢Ê©üËÉΩÈÉ®ÂàÜ
                Group {
                    showArchiveFreewordView(props: props)
                    showArchiveCategoryView(props: props)
                    showArchiveCurrentCountView(props: props)
                }
                // (2) ‰∏ÄË¶ß„Éá„Éº„ÇøË°®Á§∫ÈÉ®ÂàÜ
                Group {
                    if isLoading {
                        // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁîªÈù¢„ÇíË°®Á§∫
                        ExecutingConnectionView()
                    } else if isError {
                        // „Ç®„É©„ÉºÁîªÈù¢„ÇíË°®Á§∫
                        ConnectionErrorView(tapButtonAction: props.retryArchive)
                    } else {
                        // ArchiveContentsView„ÇíË°®Á§∫
                        showArchiveContentsView(props: props)
                    }
                }
            }
            .navigationTitle("Archive")
            .navigationBarTitleDisplayMode(.inline)
            // ÁîªÈù¢„ÅåË°®Á§∫„Åï„Çå„ÅüÈöõ„Å´‰∏ÄÂ∫¶„Å†„ÅëAPI„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂÆüË°å„Åô„ÇãÂΩ¢„Å´„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
            .onFirstAppear(props.requestArchive)
        }
    }
    
    // MARK: - Private Function

    @ViewBuilder
    private func showArchiveFreewordView(props: Props) -> some View {
        let isLoading = mapToIsLoading(props: props)
        let inputText = mapToInputText(props: props)
        ArchiveFreewordView(
            inputText: inputText,
            isLoading: isLoading,
            submitAction: { text in
                props.requestArchiveWithInputText(text)
            },
            cancelAction: {
                props.requestArchiveWithInputText("")
            }
        )
        // üëâ „Åì„Åì„ÅØ„ÇØ„É™„Ç¢„Éú„Çø„É≥Êäº‰∏ãÊôÇ„Å´TextField„ÅÆ‰∏≠Ë∫´„Çí„É™„Çª„ÉÉ„Éà„Åó„Åü„ÅÑ„ÅåÁÇ∫„Å´„ÇÑ„ÇÄ„Å™„Åè„Åì„ÅÆÂΩ¢„Å´„Åó„Å¶„ÅÑ„Åæ„Åô...üò¢
        // ÂèÇËÄÉ: https://swiftui-lab.com/swiftui-id/
        .id(UUID())
    }

    @ViewBuilder
    private func showArchiveCategoryView(props: Props) -> some View {
        let selectedCategory = mapToSelectedCategory(props: props)
        ArchiveCategoryView(
            selectedCategory: selectedCategory,
            tapCategoryChipAction: { category in
                props.requestArchiveWithSelecedCategory(category)
            }
        )
    }

    @ViewBuilder
    private func showArchiveCurrentCountView(props: Props) -> some View {
        let currentCount = mapToCurrentCount(props: props)
        ArchiveCurrentCountView(
            currentCount: currentCount,
            tapAllClearAction: {
                props.requestArchiveWithNoConditions()
                // üëâ „Ç≠„Éº„Éú„Éº„Éâ„ÇíÈñâ„Åò„Çã„Åü„ÇÅ„ÅÆÂá¶ÁêÜÔºà„É™„Çª„ÉÉ„Éà„Éú„Çø„É≥„ÇíÊäº„ÅôÈöõ„Å´„ÅØÂÖ®„Å¶„ÅÆÊù°‰ª∂Ê§úÁ¥¢„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åü„Å®„Åø„Å™„ÅôÔºâ
                UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
            }
        )
    }

    @ViewBuilder
    private func showArchiveContentsView(props: Props) -> some View {
        // Props„Åã„ÇâË°®Á§∫Áî®„ÅÆViewObject„ÇíÂèñ„ÇäÂá∫„Åô
        let archiveCellViewObjects = mapToArchiveCellViewObjects(props: props)
        let targetKeyword = mapToInputText(props: props)
        let targetCategory = mapToSelectedCategory(props: props)
        let currentCount = mapToCurrentCount(props: props)

        if currentCount == 0 {
            ArchiveEmptyView()
        } else {
            ArchiveContentsView(
                archiveCellViewObjects: archiveCellViewObjects,
                targetKeyword: targetKeyword,
                targetCategory: targetCategory,
                tapIsStoredButtonAction: { viewObject, isStored in
                    if isStored {
                        props.addToDatabase(viewObject)
                    } else {
                        props.removeFromDatabase(viewObject)
                    }
                }
            )
        }
    }

    private func mapToCurrentCount(props: Props) -> Int {
        return props.archiveCellViewObjects.count
    }

    private func mapToArchiveCellViewObjects(props: Props) -> [ArchiveCellViewObject] {
        return props.archiveCellViewObjects
    }

    private func mapToSelectedCategory(props: Props) -> String {
        return props.selectedCategory
    }

    private func mapToInputText(props: Props) -> String {
        return props.inputText
    }

    private func mapToIsError(props: Props) -> Bool {
        return props.isError
    }

    private func mapToIsLoading(props: Props) -> Bool {
        return props.isLoading
    }
}

// MARK: - Preview

struct ArchiveScreenView_Previews: PreviewProvider {
    static var previews: some View {
        // SuccessÊôÇ„ÅÆÁîªÈù¢Ë°®Á§∫
        let archiveSuccessStore = Store(
            reducer: appReducer,
            state: AppState(),
            middlewares: [
                archiveMockSuccessMiddleware(),
                addMockArchiveObjectMiddleware(),
                deleteMockArchiveObjectMiddleware()
            ]
        )
        ArchiveScreenView()
            .environmentObject(archiveSuccessStore)
            .previewDisplayName("Archive Secreen Success Preview")
        // FailureÊôÇ„ÅÆÁîªÈù¢Ë°®Á§∫
        let archiveFailureStore = Store(
            reducer: appReducer,
            state: AppState(),
            middlewares: [
                archiveMockFailureMiddleware(),
                addMockArchiveObjectMiddleware(),
                deleteMockArchiveObjectMiddleware()
            ]
        )
        ArchiveScreenView()
            .environmentObject(archiveFailureStore)
            .previewDisplayName("Archive Secreen Failure Preview")
    }
}

//
//  HomeScreenView.swift
//  SwiftUIAndReduxExample
//
//  Created by ÈÖí‰∫ïÊñá‰πü on 2021/10/16.
//

import SwiftUI

struct HomeScreenView: View {

    // MARK: - Redux

    @EnvironmentObject var store: Store<AppState>

    private struct Props {
        // Immutable„Å´Êâ±„ÅÜProperty üëâ ÁîªÈù¢Áä∂ÊÖãÁÆ°ÁêÜÁî®
        let isLoading: Bool
        let isError: Bool
        // Immutable„Å´Êâ±„ÅÜProperty üëâ ÁîªÈù¢Ë°®Á§∫Ë¶ÅÁ¥†Áî®
        let campaignBannerCarouselViewObjects: [CampaignBannerCarouselViewObject]
        let recentNewsCarouselViewObjects: [RecentNewsCarouselViewObject]
        let reaturedTopicsCarouselViewObjects: [FeaturedTopicsCarouselViewObject]
        let trendArticlesGridViewObjects: [TrendArticlesGridViewObject]
        let pickupPhotosGridViewObjects: [PickupPhotosGridViewObject]
        // ActionÁô∫Ë°åÁî®„ÅÆClosure
        let requestHome: () -> Void
        let retryHome: () -> Void
    }

    private func mapStateToProps(state: HomeState) -> Props {
        Props(
            isLoading: state.isLoading,
            isError: state.isError,
            campaignBannerCarouselViewObjects: state.campaignBannerCarouselViewObjects,
            recentNewsCarouselViewObjects: state.recentNewsCarouselViewObjects,
            reaturedTopicsCarouselViewObjects: state.reaturedTopicsCarouselViewObjects,
            trendArticlesGridViewObjects: state.trendArticlesGridViewObjects,
            pickupPhotosGridViewObjects: state.pickupPhotosGridViewObjects,
            requestHome: {
                store.dispatch(action: RequestHomeAction())
            },
            retryHome: {
                store.dispatch(action: RequestHomeAction())
            }
        )
    }

    // MARK: - body

    var body: some View {
        // Ë©≤ÂΩìÁîªÈù¢„ÅßÂà©Áî®„Åô„ÇãState(„Åì„Åì„Åß„ÅØHomeState)„Çí„Åì„ÅÆÁîªÈù¢Áî®„ÅÆProps„Å´„Éû„ÉÉ„Éî„É≥„Ç∞„Åô„Çã
        let props = mapStateToProps(state: store.state.homeState)

        // Ë°®Á§∫„Å´ÂøÖË¶Å„Å™ÂÄ§„ÇíProps„Åã„ÇâÂèñÂæó„Åô„Çã
        let isLoading = mapToIsLoading(props: props)
        let isError = mapToIsError(props: props)

        // ÁîªÈù¢Áî®„ÅÆProps„Å´Âøú„Åò„ÅüÁîªÈù¢Ë¶ÅÁ¥†Ë°®Á§∫Âá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã
        NavigationStack {
            Group {
                if isLoading {
                    // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁîªÈù¢„ÇíË°®Á§∫
                    ExecutingConnectionView()
                } else if isError {
                    // „Ç®„É©„ÉºÁîªÈù¢„ÇíË°®Á§∫
                    ConnectionErrorView(tapButtonAction: props.retryHome)
                } else {
                    // HomeContentsView(„Åù„Çå„Åû„Çå„ÅÆSectionË¶ÅÁ¥†„ÇíÈõÜÁ¥Ñ„Åó„Å¶„ÅÑ„ÇãÁîªÈù¢Ë¶ÅÁ¥†)„ÇíË°®Á§∫
                    showHomeContentsView(props: props)
                }
            }
            .navigationTitle("Home")
            .navigationBarTitleDisplayMode(.inline)
            // ÁîªÈù¢„ÅåË°®Á§∫„Åï„Çå„ÅüÈöõ„Å´‰∏ÄÂ∫¶„Å†„ÅëAPI„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂÆüË°å„Åô„ÇãÂΩ¢„Å´„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
            .onFirstAppear(props.requestHome)
        }
    }

    // MARK: - Private Function

    @ViewBuilder
    private func showHomeContentsView(props: Props) -> some View {
        // Props„Åã„ÇâÂêÑSectionË°®Á§∫Áî®„ÅÆViewObject„ÇíÂèñ„ÇäÂá∫„Åô
        let campaignBannerCarouselViewObjects = mapToCampaignBannerCarouselViewObjects(props: props)
        let recentNewsCarouselViewObjects = mapToRecentNewsCarouselViewObjects(props: props)
        let featuredTopicsCarouselViewObjects = mapToFeaturedTopicsCarouselViewObjects(props: props)
        let trendArticlesGridViewObjects = mapToTrendArticlesGridViewObjects(props: props)
        let pickupPhotoGridViewObjects = mapToPickupPhotosGridViewObjects(props: props)
        // ÂêÑSection„Å´Ë©≤ÂΩì„Åô„ÇãViewË¶ÅÁ¥†„Å´Ë°®Á§∫„Å´ÂøÖË¶Å„Å™ViewObject„ÇíÂèçÊò†„Åô„Çã
        HomeContentsView(
            campaignBannerCarouselViewObjects: campaignBannerCarouselViewObjects,
            recentNewsCarouselViewObjects: recentNewsCarouselViewObjects,
            featuredTopicsCarouselViewObjects: featuredTopicsCarouselViewObjects,
            trendArticlesGridViewObjects: trendArticlesGridViewObjects,
            pickupPhotosGridViewObjects: pickupPhotoGridViewObjects
        )
    }

    private func mapToCampaignBannerCarouselViewObjects(props: Props) -> [CampaignBannerCarouselViewObject] {
        return props.campaignBannerCarouselViewObjects
    }

    private func mapToRecentNewsCarouselViewObjects(props: Props) -> [RecentNewsCarouselViewObject] {
        return props.recentNewsCarouselViewObjects
    }

    private func mapToFeaturedTopicsCarouselViewObjects(props: Props) -> [FeaturedTopicsCarouselViewObject] {
        return props.reaturedTopicsCarouselViewObjects
    }

    private func mapToTrendArticlesGridViewObjects(props: Props) -> [TrendArticlesGridViewObject] {
        return props.trendArticlesGridViewObjects
    }

    private func mapToPickupPhotosGridViewObjects(props: Props) -> [PickupPhotosGridViewObject] {
        return props.pickupPhotosGridViewObjects
    }

    private func mapToIsError(props: Props) -> Bool {
        return props.isError
    }

    private func mapToIsLoading(props: Props) -> Bool {
        return props.isLoading
    }
}

// MARK: - Preview

struct HomeScreenView_Previews: PreviewProvider {
    static var previews: some View {
        // SuccessÊôÇ„ÅÆÁîªÈù¢Ë°®Á§∫
        let homeSuccessStore = Store(
            reducer: appReducer,
            state: AppState(),
            middlewares: [
                homeMockSuccessMiddleware()
            ]
        )
        HomeScreenView()
            .environmentObject(homeSuccessStore)
            .previewDisplayName("Home Secreen Success Preview")
        // FailureÊôÇ„ÅÆÁîªÈù¢Ë°®Á§∫
        let homeFailureStore = Store(
            reducer: appReducer,
            state: AppState(),
            middlewares: [
                homeMockFailureMiddleware()
            ]
        )
        HomeScreenView()
            .environmentObject(homeFailureStore)
            .previewDisplayName("Home Secreen Failure Preview")
    }
}

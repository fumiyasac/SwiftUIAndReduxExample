//
//  HomeScreenView.swift
//  SwiftUIAndReduxExample
//
//  Created by ÈÖí‰∫ïÊñá‰πü on 2021/10/16.
//

import SwiftUI

struct HomeScreenView: View {

    // MARK: - Redux

    @EnvironmentObject var store: Store<AppState>

    struct Props {
        // ‚ú® Immutable„Å´Êâ±„ÅÜProperty üëâ ÁîªÈù¢Áä∂ÊÖãÁÆ°ÁêÜÁî®
        let isLoading: Bool
        let isError: Bool
        // ‚ú® Immutable„Å´Êâ±„ÅÜProperty üëâ ÁîªÈù¢Ë°®Á§∫Ë¶ÅÁ¥†Áî®
        let campaignBanners: [CampaignBannerEntity]
        let featuredTopics: [FeaturedTopicEntity]
        let recentNews: [RecentNewsEntity]
        let trendArticles: [TrendArticleEntity]
        let pickupPhotos: [PickupPhotoEntity]
        // ‚ú® ActionÁô∫Ë°åÁî®„ÅÆClosure
        let requestHome: () -> Void
        let retryHome: () -> Void
    }

    private func mapStateToProps(state: HomeState) -> Props {
        Props(
            isLoading: state.isLoading,
            isError: state.isError,
            campaignBanners: state.campaignBanners,
            featuredTopics: state.featuredTopics,
            recentNews: state.recentNews,
            trendArticles: state.trendArticles,
            pickupPhotos: state.pickupPhotos,
            requestHome: {
                store.dispatch(action: RequestHomeAction())
            },
            retryHome: {
                store.dispatch(action: RequestHomeAction())
            }
        )
    }

    // MARK: - body

    var body: some View {
        // Ë©≤ÂΩìÁîªÈù¢„ÅßÂà©Áî®„Åô„ÇãState(„Åì„Åì„Åß„ÅØHomeState)„Çí„Åì„ÅÆÁîªÈù¢Áî®„ÅÆProps„Å´„Éû„ÉÉ„Éî„É≥„Ç∞„Åô„Çã
        let props = mapStateToProps(state: store.state.homeState)
        // ÁîªÈù¢Áî®„ÅÆProps„Å´Âøú„Åò„ÅüÁîªÈù¢Ë¶ÅÁ¥†Ë°®Á§∫Âá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã
        NavigationStack {
            Group {
                if props.isLoading {
                    ExecutingConnectionView()
                } else if props.isError {
                    ConnectionErrorView(tapButtonAction: props.retryHome)
                } else {
                    showHomeScreen(props: props)
                }
            }
            .navigationTitle("Home")
            .navigationBarTitleDisplayMode(.inline)
            .onAppear(perform: props.requestHome)
        }
    }
    
    // MARK: - Private Function

    @ViewBuilder
    private func showHomeScreen(props: Props) -> some View {
        // Props„ÅÆÂÄ§„ÇíË°®Á§∫Áî®„ÅÆViewObject„Å´„Éû„ÉÉ„Éî„É≥„Ç∞„ÅóÁõ¥„Åô
        let campaignBannersCarouselViewObjects = mapToCampaignBannersCarouselViewObjects(props: props)
        let recentNewsCarouselViewObjects = mapToRecentNewsCarouselViewObjects(props: props)
        let featuredTopicsCarouselViewObjects = mapToFeaturedTopicsCarouselViewObjects(props: props)
        let trendArticlesGridViewObjects = mapToTrendArticlesGridViewObjects(props: props)
        let pickupPhotoGridViewObjects = mapToPickupPhotosGridViewObjects(props: props)
        // ÂêÑSection„Å´Ë©≤ÂΩì„Åô„ÇãViewË¶ÅÁ¥†„Å´Ë°®Á§∫„Å´ÂøÖË¶Å„Å™ViewObject„ÇíÂèçÊò†„Åô„Çã
        ScrollView {
            // (1) Â≠£ÁØÄ„ÅÆÁâπÈõÜ„Ç≥„É≥„ÉÜ„É≥„ÉÑ‰∏ÄË¶ß
            HomeCommonSectionView(
                title: "Â≠£ÁØÄ„ÅÆÁâπÈõÜ„Ç≥„É≥„ÉÜ„É≥„ÉÑ‰∏ÄË¶ß",
                subTitle: "Introduce seasonal shopping and features."
            )
            CampaignBannerCarouselView(
                campaignBannersCarouselViewObjects: campaignBannersCarouselViewObjects
            )
            // (2) ÊúÄÊñ∞„ÅÆ„Åä„Åó„Çâ„Åõ
            HomeCommonSectionView(
                title: "ÊúÄÊñ∞„ÅÆ„Åä„Åó„Çâ„Åõ",
                subTitle: "Let's Check Here for App-only Notifications."
            )
            RecentNewsCarouselView(
                recentNewsCarouselViewObjects: recentNewsCarouselViewObjects
            )
            // (3) ÁâπÈõÜÊé≤ËºâÂ∫óËàó
            HomeCommonSectionView(
                title: "ÁâπÈõÜÊé≤ËºâÂ∫óËàó",
                subTitle: "Please Teach Us Your Favorite Gourmet."
            )
            FeaturedTopicsCarouselView(
                featuredTopicsCarouselViewObjects: featuredTopicsCarouselViewObjects
            )
            // (4) „Éà„É¨„É≥„ÉâË®ò‰∫ãÁ¥π‰ªã
            HomeCommonSectionView(
                title: "„Éà„É¨„É≥„ÉâË®ò‰∫ãÁ¥π‰ªã",
                subTitle: "Memorial Articles about Special Season."
            )
            TrendArticlesGridView(
                trendArticlesGridViewObjects: trendArticlesGridViewObjects
            )
            // (5) „Éî„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂÜôÁúüÈõÜ
            HomeCommonSectionView(
                title: "„Éî„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂÜôÁúüÈõÜ",
                subTitle: "Let's Enjoy Pickup Gourmet Photo Archives."
            )
            PickupPhotosGridView(
                pickupPhotosGridViewObjects: pickupPhotoGridViewObjects
            )
        }
    }

    private func mapToCampaignBannersCarouselViewObjects(props: Props) -> [CampaignBannerCarouselViewObject] {
        return props.campaignBanners.map {
            CampaignBannerCarouselViewObject(
                id: $0.id,
                bannerContentsId: $0.bannerContentsId,
                bannerUrl: URL(string: $0.bannerUrl) ?? nil
            )
        }
    }

    private func mapToRecentNewsCarouselViewObjects(props: Props) -> [RecentNewsCarouselViewObject] {
        return props.recentNews.map {
            RecentNewsCarouselViewObject(
                id: $0.id,
                thumbnailUrl: URL(string: $0.thumbnailUrl) ?? nil,
                title: $0.title,
                newsCategory: $0.newsCategory,
                publishedAt: DateLabelFormatter.getDateStringFromAPI(apiDateString: $0.publishedAt)
            )
        }
    }

    private func mapToFeaturedTopicsCarouselViewObjects(props: Props) -> [FeaturedTopicsCarouselViewObject] {
        return props.featuredTopics.map {
            FeaturedTopicsCarouselViewObject(
                id: $0.id,
                rating: $0.rating,
                thumbnailUrl: URL(string: $0.thumbnailUrl) ?? nil,
                title: $0.title,
                caption: $0.caption,
                publishedAt: DateLabelFormatter.getDateStringFromAPI(apiDateString: $0.publishedAt)
            )
        }
    }

    private func mapToTrendArticlesGridViewObjects(props: Props) -> [TrendArticlesGridViewObject] {
        return props.trendArticles.map {
            TrendArticlesGridViewObject(
                id: $0.id,
                thumbnailUrl: URL(string: $0.thumbnailUrl) ?? nil,
                title: $0.title,
                introduction:$0.introduction,
                publishedAt: DateLabelFormatter.getDateStringFromAPI(apiDateString: $0.publishedAt)
            )
        }
    }

    private func mapToPickupPhotosGridViewObjects(props: Props) -> [PickupPhotosGridViewObject] {
        return props.pickupPhotos.map {
            PickupPhotosGridViewObject(
                id: $0.id,
                title: $0.title,
                caption: $0.caption,
                photoUrl: URL(string: $0.photoUrl) ?? nil,
                photoWidth: CGFloat($0.photoWidth),
                photoHeight: CGFloat($0.photoHeight)
            )
        }
    }
}

// MARK: - Preview

struct HomeScreenView_Previews: PreviewProvider {
    static var previews: some View {
        // SuccessÊôÇ„ÅÆÁîªÈù¢Ë°®Á§∫
        let homeSuccessStore = Store(
            reducer: appReducer,
            state: AppState(),
            middlewares: [
                homeMockSuccessMiddleware()
            ]
        )
        HomeScreenView()
            .environmentObject(homeSuccessStore)
            .previewDisplayName("Home Secreen Success Preview")
        // FailureÊôÇ„ÅÆÁîªÈù¢Ë°®Á§∫
        let homeFailureStore = Store(
            reducer: appReducer,
            state: AppState(),
            middlewares: [
                homeMockFailureMiddleware()
            ]
        )
        HomeScreenView()
            .environmentObject(homeFailureStore)
            .previewDisplayName("Home Secreen Failure Preview")
    }
}

//
//  FavoriteScreenView.swift
//  SwiftUIAndReduxExample
//
//  Created by ÈÖí‰∫ïÊñá‰πü on 2021/10/16.
//

import SwiftUI
import CollectionViewPagingLayout

struct FavoriteScreenView: View {

    // MARK: - Redux

    @EnvironmentObject var store: Store<AppState>

    private struct Props {
        // Immutable„Å´Êâ±„ÅÜProperty üëâ ÁîªÈù¢Áä∂ÊÖãÁÆ°ÁêÜÁî®
        let isLoading: Bool
        let isError: Bool
        // Immutable„Å´Êâ±„ÅÜProperty üëâ ÁîªÈù¢Ë°®Á§∫Ë¶ÅÁ¥†Áî®
        let favoritePhotosCardViewObjects: [FavoritePhotosCardViewObject]
        // ActionÁô∫Ë°åÁî®„ÅÆClosure
        let requestFavorite: () -> Void
        let retryFavorite: () -> Void
    }

    private func mapStateToProps(state: FavoriteState) -> Props {
        Props(
            isLoading: state.isLoading,
            isError: state.isError,
            favoritePhotosCardViewObjects: state.favoritePhotosCardViewObjects,
            requestFavorite: {
                store.dispatch(action: RequestFavoriteAction())
            },
            retryFavorite: {
                store.dispatch(action: RequestFavoriteAction())
            }
        )
    }

    // MARK: - Body

    var body: some View {
        // Ë©≤ÂΩìÁîªÈù¢„ÅßÂà©Áî®„Åô„ÇãState(„Åì„Åì„Åß„ÅØHomeState)„Çí„Åì„ÅÆÁîªÈù¢Áî®„ÅÆProps„Å´„Éû„ÉÉ„Éî„É≥„Ç∞„Åô„Çã
        let props = mapStateToProps(state: store.state.favoriteState)

        // Ë°®Á§∫„Å´ÂøÖË¶Å„Å™ÂÄ§„ÇíProps„Åã„ÇâÂèñÂæó„Åô„Çã
        let isLoading = mapToIsLoading(props: props)
        let isError = mapToIsError(props: props)

        // ÁîªÈù¢Áî®„ÅÆProps„Å´Âøú„Åò„ÅüÁîªÈù¢Ë¶ÅÁ¥†Ë°®Á§∫Âá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã
        NavigationStack {
            Group {
                if isLoading {
                    // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁîªÈù¢„ÇíË°®Á§∫
                    ExecutingConnectionView()
                } else if isError {
                    // „Ç®„É©„ÉºÁîªÈù¢„ÇíË°®Á§∫
                    ConnectionErrorView(tapButtonAction: props.retryFavorite)
                } else {
                    // FavoriteÁîªÈù¢„ÇíË°®Á§∫
                    showFavoriteContentsView(props: props)
                }
            }
            .navigationTitle("Favorite")
            .navigationBarTitleDisplayMode(.inline)
            // ÁîªÈù¢„ÅåË°®Á§∫„Åï„Çå„ÅüÈöõ„Å´‰∏ÄÂ∫¶„Å†„ÅëAPI„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂÆüË°å„Åô„ÇãÂΩ¢„Å´„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
            .onFirstAppear(props.requestFavorite)
        }
    }

    // MARK: - Private Function

    @ViewBuilder
    private func showFavoriteContentsView(props: Props) -> some View {
        // Props„Åã„ÇâË°®Á§∫Áî®„ÅÆViewObject„ÇíÂèñ„ÇäÂá∫„Åô
        let favoritePhotosCardViewObjects = mapToFavoritePhotosCardViewObjects(props: props)
        FavoriteContentsView(favoritePhotosCardViewObjects: favoritePhotosCardViewObjects)
    }

    private func mapToFavoritePhotosCardViewObjects(props: Props) -> [FavoritePhotosCardViewObject] {
        return props.favoritePhotosCardViewObjects
    }

    private func mapToIsError(props: Props) -> Bool {
        return props.isError
    }

    private func mapToIsLoading(props: Props) -> Bool {
        return props.isLoading
    }
}

// MARK: - Preview

struct FavoriteScreenView_Previews: PreviewProvider {
    static var previews: some View {
        // SuccessÊôÇ„ÅÆÁîªÈù¢Ë°®Á§∫
        let favoriteSuccessStore = Store(
            reducer: appReducer,
            state: AppState(),
            middlewares: [
                favoriteMockSuccessMiddleware()
            ]
        )
        FavoriteScreenView()
            .environmentObject(favoriteSuccessStore)
            .previewDisplayName("Favorite Secreen Success Preview")
        // FailureÊôÇ„ÅÆÁîªÈù¢Ë°®Á§∫
        let favoriteFailureStore = Store(
            reducer: appReducer,
            state: AppState(),
            middlewares: [
                favoriteMockFailureMiddleware()
            ]
        )
        FavoriteScreenView()
            .environmentObject(favoriteFailureStore)
            .previewDisplayName("Favorite Secreen Failure Preview")
    }
}

//
//  ProfileScreenView.swift
//  SwiftUIAndReduxExample
//
//  Created by ÈÖí‰∫ïÊñá‰πü on 2021/10/16.
//

import SwiftUI

struct ProfileScreenView: View {

    // MARK: - Redux

    @EnvironmentObject var store: Store<AppState>

    private struct Props {
        // Immutable„Å´Êâ±„ÅÜProperty üëâ ÁîªÈù¢Áä∂ÊÖãÁÆ°ÁêÜÁî®
        let isLoading: Bool
        let isError: Bool
        // Immutable„Å´Êâ±„ÅÜProperty üëâ ÁîªÈù¢Ë°®Á§∫Ë¶ÅÁ¥†Áî®
        let backgroundImageUrl: String?
        let profilePersonalViewObject: ProfilePersonalViewObject?
        let profileSelfIntroductionViewObject: ProfileSelfIntroductionViewObject?
        let profilePointsAndHistoryViewObject: ProfilePointsAndHistoryViewObject?
        let profileSocialMediaViewObject: ProfileSocialMediaViewObject?
        let profileInformationViewObject: ProfileInformationViewObject?
        // ActionÁô∫Ë°åÁî®„ÅÆClosure
        let requestProfile: () -> Void
        let retryProfile: () -> Void
    }

    private func mapStateToProps(state: ProfileState) -> Props {
        Props(
            isLoading: state.isLoading,
            isError: state.isError,
            backgroundImageUrl: state.backgroundImageUrl,
            profilePersonalViewObject: state.profilePersonalViewObject,
            profileSelfIntroductionViewObject: state.profileSelfIntroductionViewObject,
            profilePointsAndHistoryViewObject: state.profilePointsAndHistoryViewObject,
            profileSocialMediaViewObject: state.profileSocialMediaViewObject,
            profileInformationViewObject: state.profileInformationViewObject,
            requestProfile: {
                store.dispatch(action: RequestProfileAction())
            },
            retryProfile: {
                store.dispatch(action: RequestProfileAction())
            }
        )
    }

    // MARK: - body

    var body: some View {
        // Ë©≤ÂΩìÁîªÈù¢„ÅßÂà©Áî®„Åô„ÇãState(„Åì„Åì„Åß„ÅØHomeState)„Çí„Åì„ÅÆÁîªÈù¢Áî®„ÅÆProps„Å´„Éû„ÉÉ„Éî„É≥„Ç∞„Åô„Çã
        let props = mapStateToProps(state: store.state.profileState)
        // ÁîªÈù¢Áî®„ÅÆProps„Å´Âøú„Åò„ÅüÁîªÈù¢Ë¶ÅÁ¥†Ë°®Á§∫Âá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã
        NavigationStack {
            Group {
                if props.isLoading {
                    // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁîªÈù¢„ÇíË°®Á§∫
                    ExecutingConnectionView()
                } else if props.isError {
                    // „Ç®„É©„ÉºÁîªÈù¢„ÇíË°®Á§∫
                    ConnectionErrorView(tapButtonAction: props.retryProfile)
                } else {
                    // ProfileContentsView(„Åù„Çå„Åû„Çå„ÅÆSectionË¶ÅÁ¥†„ÇíÈõÜÁ¥Ñ„Åó„Å¶„ÅÑ„ÇãÁîªÈù¢Ë¶ÅÁ¥†)„ÇíË°®Á§∫
                    showProfileContentsView(props: props)
                }
            }
            .navigationTitle("Profile")
            .navigationBarTitleDisplayMode(.inline)
            // üëâ SafeArea„Åæ„ÅßË°®Á§∫È†òÂüü„Çí‰º∏„Å∞„ÅôÔºà„Åì„Çå„Çí„Åô„Çã„Å®„Çµ„É†„Éç„Ç§„É´ÁîªÂÉè„ÅåÁ∂∫È∫ó„Å´Âèé„Åæ„ÇãÔºâ
            .edgesIgnoringSafeArea(.top)
            // üëâ NavigationBar„ÇíÈö†„Åô„ÅãÂê¶„ÅãÈöõ„ÅÆË®≠ÂÆö
            // ‚Äª GeometryReader„ÇíÁî®„ÅÑ„ÅüParallaxË°®ÁèæÊôÇ„Å´„ÅØ„ÄÅNavigationBar„Åß‰∏äÈÉ®„ÅåÈö†„Çå„Å¶„Åó„Åæ„ÅÜ„Åü„ÇÅ„ÄÅ„Åì„ÅÆÊßò„Å™ÂΩ¢„Å®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
            .navigationBarHidden(true)
            // ÁîªÈù¢„ÅåË°®Á§∫„Åï„Çå„ÅüÈöõ„Å´‰∏ÄÂ∫¶„Å†„ÅëAPI„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂÆüË°å„Åô„ÇãÂΩ¢„Å´„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
            .onFirstAppear(props.requestProfile)
        }
    }

    // MARK: - Private Function

    @ViewBuilder
    private func showProfileContentsView(props: Props) -> some View {
        // Props„Åã„ÇâÂêÑË°®Á§∫Áî®„ÅÆViewObject„ÇíÂèñ„ÇäÂá∫„Åô
        if let backgroundImageUrl = mapToBackgroundImageUrl(props: props),
           let profilePersonalViewObject = mapToProfilePersonalViewObject(props: props),
           let profileSelfIntroductionViewObject = mapToProfileSelfIntroductionViewObject(props: props),
           let profilePointsAndHistoryViewObject = mapToProfilePointsAndHistoryViewObject(props: props),
           let profileSocialMediaViewObject = mapToProfileSocialMediaViewObject(props: props),
           let profileInformationViewObject = mapToProfileInformationViewObject(props: props) {
            // Ë°®Á§∫„Å´ÂøÖË¶Å„Å™Ë¶ÅÁ¥†„Åå„Åô„Åπ„Å¶ÊèÉ„Å£„Å¶„ÅÑ„ÅüÂ†¥Âêà„ÅØProfileContentsView„ÇíË°®Á§∫„Åï„Åõ„Çã
            ProfileContentsView(
                backgroundImageUrl: backgroundImageUrl,
                profilePersonalViewObject: profilePersonalViewObject,
                profileSelfIntroductionViewObject: profileSelfIntroductionViewObject,
                profilePointsAndHistoryViewObject: profilePointsAndHistoryViewObject,
                profileSocialMediaViewObject: profileSocialMediaViewObject,
                profileInformationViewObject: profileInformationViewObject
            )
        } else {
            // Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§nil„Å´„Å™„ÇãÁâ©„Åå„ÅÇ„Å£„ÅüÂ†¥Âêà„ÅØEmptyView„ÇíË°®Á§∫„Åï„Åõ„Çã
            VStack {
                EmptyView()
            }
        }
    }

    private func mapToBackgroundImageUrl(props: Props) -> URL? {
        return URL(string: props.backgroundImageUrl ?? "")
    }

    private func mapToProfilePersonalViewObject(props: Props) -> ProfilePersonalViewObject? {
        return props.profilePersonalViewObject
    }

    private func mapToProfileSelfIntroductionViewObject(props: Props) -> ProfileSelfIntroductionViewObject? {
        return props.profileSelfIntroductionViewObject
    }

    private func mapToProfilePointsAndHistoryViewObject(props: Props) -> ProfilePointsAndHistoryViewObject? {
        return props.profilePointsAndHistoryViewObject
    }

    private func mapToProfileSocialMediaViewObject(props: Props) -> ProfileSocialMediaViewObject? {
        return props.profileSocialMediaViewObject
    }

    private func mapToProfileInformationViewObject(props: Props) -> ProfileInformationViewObject? {
        return props.profileInformationViewObject
    }
}

// MARK: - Preview

struct ProfileScreenView_Previews: PreviewProvider {
    static var previews: some View {
        // SuccessÊôÇ„ÅÆÁîªÈù¢Ë°®Á§∫
        let profileSuccessStore = Store(
            reducer: appReducer,
            state: AppState(),
            middlewares: [
                profileMockSuccessMiddleware()
            ]
        )
        ProfileScreenView()
            .environmentObject(profileSuccessStore)
            .previewDisplayName("Profile Secreen Success Preview")
        // FailureÊôÇ„ÅÆÁîªÈù¢Ë°®Á§∫
        let profileFailureStore = Store(
            reducer: appReducer,
            state: AppState(),
            middlewares: [
                profileMockFailureMiddleware()
            ]
        )
        ProfileScreenView()
            .environmentObject(profileFailureStore)
            .previewDisplayName("Profile Secreen Failure Preview")
    }
}

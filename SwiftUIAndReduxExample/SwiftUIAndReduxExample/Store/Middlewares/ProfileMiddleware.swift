//
//  ProfileMiddleware.swift
//  SwiftUIAndReduxExample
//
//  Created by ÈÖí‰∫ïÊñá‰πü on 2023/01/24.
//

import Foundation

// üëâ Ë¶ÅÁ¥†Ë°®Á§∫„ÅßÂà©Áî®„Åô„Çã„É¨„Çπ„Éù„É≥„Çπ„Çí„Åæ„Å®„ÇÅ„Çã„Åü„ÇÅ„ÅÆtypealias
// ‚Äª convertProfileSectionResponse(profileResponses: [ProfileResponse])„ÅÆÊàª„ÇäÂÄ§
typealias ProfileSectionResponse = (
    profilePersonalResponse: ProfilePersonalResponse,
    profileAnnoucementResponse: ProfileAnnoucementResponse,
    profileCommentResponse: ProfileCommentResponse,
    profileRecentFavoriteResponse: ProfileRecentFavoriteResponse
)

// API„É™„ÇØ„Ç®„Çπ„ÉàÁµêÊûú„Å´Âøú„Åò„ÅüAction„ÇíÁô∫Ë°å„Åô„Çã
// ‚Äª„ÉÜ„Çπ„Éà„Ç≥„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØÊ§úË®ºÁî®„ÅÆhomeMiddleware„ÅÆ„ÇÇ„ÅÆ„Å´Â∑Æ„ÅóÊõø„Åà„ÇãÊÉ≥ÂÆö
func profileMiddleware() -> Middleware<AppState> {
    return { state, action, dispatch in
        switch action {
            case let action as RequestProfileAction:
            // üëâ RequestHomeAction„ÇíÂèó„ÅëÂèñ„Å£„Åü„Çâ„Åù„ÅÆÂæå„Å´API„É™„ÇØ„Ç®„Çπ„ÉàÂá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã
            requestProfileSections(action: action, dispatch: dispatch)
            default:
                break
        }
    }
}

// üëâ API„É™„ÇØ„Ç®„Çπ„ÉàÂá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã„Åü„ÇÅ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ
// ‚Äª„ÉÜ„Çπ„Éà„Ç≥„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØÊÉ≥ÂÆö„Åô„ÇãStub„Éá„Éº„Çø„ÇíËøî„Åô„ÇÇ„ÅÆ„Å´Â∑Æ„ÅóÊõø„Åà„ÇãÊÉ≥ÂÆö
private func requestProfileSections(action: RequestProfileAction, dispatch: @escaping Dispatcher) {
    Task { @MainActor in
        do {
            let profileResponses = try await ProfileRepositoryFactory.create().getProfileResponses()
            let profileSectionResponses = try convertProfileSectionResponse(profileResponses: profileResponses)
            // „ÅäÊúõ„Åø„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„ÅåÂèñÂæó„Åß„Åç„ÅüÂ†¥Âêà„ÅØÊàêÂäüÊôÇ„ÅÆAction„ÇíÁô∫Ë°å„Åô„Çã
            dispatch(
                SuccessProfileAction(
                    profilePersonalEntity: profileSectionResponses.profilePersonalResponse.result,
                    profileAnnoucementEntities: profileSectionResponses.profileAnnoucementResponse.result,
                    profileCommentEntities: profileSectionResponses.profileCommentResponse.result,
                    profileRecentFavoriteEntities: profileSectionResponses.profileRecentFavoriteResponse.result
                )
            )
            dump(profileResponses)
        } catch APIError.error(let message) {
            // ÈÄö‰ø°„Ç®„É©„Éº„Å™„ÅÑ„Åó„ÅØ„ÅäÊúõ„Åø„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„ÅåÂèñÂæó„Åß„Åç„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅØÊàêÂäüÊôÇ„ÅÆAction„ÇíÁô∫Ë°å„Åô„Çã
            dispatch(FailureProfileAction())
            print(message)
        }
    }
}

private func convertProfileSectionResponse(profileResponses: [ProfileResponse]) throws -> ProfileSectionResponse {
    var profilePersonalResponse: ProfilePersonalResponse?
    var profileAnnoucementResponse: ProfileAnnoucementResponse?
    var profileCommentResponse: ProfileCommentResponse?
    var profileRecentFavoriteResponse: ProfileRecentFavoriteResponse?
    // ProfileResponse„ÅÆ‰∏≠„Åã„ÇâË©≤ÂΩì„Åô„Çã„É¨„Çπ„Éù„É≥„Çπ„ÇíÂèñ„ÇäÂá∫„Åô
    for profileResponse in profileResponses {
        if let targetProfilePersonalResponse = profileResponse as? ProfilePersonalResponse {
            profilePersonalResponse = targetProfilePersonalResponse
        }
        if let targetProfileAnnoucementResponse = profileResponse as? ProfileAnnoucementResponse {
            profileAnnoucementResponse = targetProfileAnnoucementResponse
        }
        if let targetProfileCommentResponse = profileResponse as? ProfileCommentResponse {
            profileCommentResponse = targetProfileCommentResponse
        }
        if let targetProfileRecentFavoriteResponse = profileResponse as? ProfileRecentFavoriteResponse {
            profileRecentFavoriteResponse = targetProfileRecentFavoriteResponse
        }
    }
    // MEMO: „Å©„Çå„Åã1„Å§„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„Åß„ÇÇÊ¨†„Åë„Å¶„ÅÑ„ÇãÊßò„Å™Áä∂ÊÖã„Å™„Çâ„Å∞APIError„Å®„Åó„Å¶Âèñ„ÇäÊâ±„ÅÜ
    guard let profilePersonalResponse = profilePersonalResponse,
          let profileAnnoucementResponse = profileAnnoucementResponse,
          let profileCommentResponse = profileCommentResponse,
          let profileRecentFavoriteResponse = profileRecentFavoriteResponse else {
        throw APIError.error(message: "No ProfileSectionResponse exists.")
    }
    return ProfileSectionResponse(
        profilePersonalResponse: profilePersonalResponse,
        profileAnnoucementResponse: profileAnnoucementResponse,
        profileCommentResponse: profileCommentResponse,
        profileRecentFavoriteResponse: profileRecentFavoriteResponse
    )
}
